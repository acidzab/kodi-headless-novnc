diff --git a/xbmc/interfaces/builtins/LibraryBuiltins.cpp b/xbmc/interfaces/builtins/LibraryBuiltins.cpp
index 5cb678a3c6..04cecc716a 100644
--- a/xbmc/interfaces/builtins/LibraryBuiltins.cpp
+++ b/xbmc/interfaces/builtins/LibraryBuiltins.cpp
@@ -18,6 +18,7 @@
 #include "guilib/LocalizeStrings.h"
 #include "messaging/helpers/DialogHelper.h"
 #include "messaging/helpers/DialogOKHelper.h"
+#include "music/MusicDbUrl.h"
 #include "music/MusicLibraryQueue.h"
 #include "music/infoscanner/MusicInfoScanner.h"
 #include "settings/LibExportSettings.h"
@@ -344,6 +345,44 @@ static int SearchVideoLibrary(const std::vector<std::string>& params)
   return 0;
 }
 
+/*! \brief Rescrapes additional information for a given artist
+ *  \params params The parameters.
+ *  \details params[0] = "artist id"
+ */
+static int RefreshArtist(const std::vector<std::string>& params)
+{
+  // Checking if the artist id is passed
+  if (params.empty())
+    return -1;
+
+  // Set the artist id on the musicdb url
+  CMusicDbUrl musicUrl;
+  musicUrl.AddOption("artistid", params.front());
+
+  // Start rescraping additional information for the given artist
+  CMusicLibraryQueue::GetInstance().StartArtistScan(musicUrl.ToString(), true);
+  return 0;
+}
+
+/*! \brief Rescrapes additional information for a given album
+ *  \params params The parameters.
+ *  \details params[0] = "album id"
+ */
+static int RefreshAlbum(const std::vector<std::string>& params)
+{
+  // Checking if the album id is passed
+  if (params.empty())
+    return -1;
+
+  // Set the album id on the musicdb url
+  CMusicDbUrl musicUrl;
+  musicUrl.AddOption("albumid", params.front());
+
+  // Start rescraping additional information for the given album
+  CMusicLibraryQueue::GetInstance().StartAlbumScan(musicUrl.ToString(), true);
+  return 0;
+}
+
 // Note: For new Texts with comma add a "\" before!!! Is used for table text.
 //
 /// \page page_List_of_built_in_functions
@@ -401,16 +440,31 @@ static int SearchVideoLibrary(const std::vector<std::string>& params)
 ///     ,
 ///     Brings up a search dialog which will search the library
 ///   }
+///   \table_row2_l{
+///     <b>`musiclibrary.refreshartist([artistId\])`</b>
+///     ,
+///     Rescrapes additional information for a given artist
+///     @param[in] artistId             Artist Id.
+///   }
+///   \table_row2_l{
+///     <b>`musiclibrary.refreshalbum([albumId\])`</b>
+///     ,
+///     Rescrapes additional information for a given album
+///     @param[in] albumId             Album Id.
+///   }
 ///  \table_end
 ///
 
 CBuiltins::CommandMap CLibraryBuiltins::GetOperations() const
 {
-  return {
-          {"cleanlibrary",        {"Clean the video/music library", 1, CleanLibrary}},
-          {"exportlibrary",       {"Export the video/music library", 1, ExportLibrary}},
-          {"exportlibrary2",      {"Export the video/music library", 1, ExportLibrary2}},
-          {"updatelibrary",       {"Update the selected library (music or video)", 1, UpdateLibrary}},
-          {"videolibrary.search", {"Brings up a search dialog which will search the library", 0, SearchVideoLibrary}}
-         };
+  return {{"cleanlibrary", {"Clean the video/music library", 1, CleanLibrary}},
+          {"exportlibrary", {"Export the video/music library", 1, ExportLibrary}},
+          {"exportlibrary2", {"Export the video/music library", 1, ExportLibrary2}},
+          {"updatelibrary", {"Update the selected library (music or video)", 1, UpdateLibrary}},
+          {"videolibrary.search",
+           {"Brings up a search dialog which will search the library", 0, SearchVideoLibrary}},
+          {"musiclibrary.refreshartist",
+           {"Rescrapes additional information for a given artist", 1, RefreshArtist}},
+          {"musiclibrary.refreshalbum",
+           {"Rescrapes additional information for a given album", 1, RefreshAlbum}}};
 }
diff --git a/xbmc/interfaces/json-rpc/AudioLibrary.cpp b/xbmc/interfaces/json-rpc/AudioLibrary.cpp
index 3d6fa79d79..0e426976c5 100644
--- a/xbmc/interfaces/json-rpc/AudioLibrary.cpp
+++ b/xbmc/interfaces/json-rpc/AudioLibrary.cpp
@@ -1353,6 +1353,55 @@ JSONRPC_STATUS CAudioLibrary::GetAdditionalSongDetails(const CVariant& parameter
   return OK;
 }
 
+JSONRPC_STATUS CAudioLibrary::RefreshArtist(const std::string& method,
+                                            ITransportLayer* transport,
+                                            IClient* client,
+                                            const CVariant& parameterObject,
+                                            CVariant& result)
+{
+  CMusicDatabase musicdatabase;
+  if (!musicdatabase.Open())
+    return InternalError;
+
+  // Checking if artistID is a valid one
+  const CVariant artistIdVariant{parameterObject["artistid"]};
+  const int artistID = static_cast<int>(artistIdVariant.asInteger());
+  if (!musicdatabase.GetArtistExists(artistID))
+    return InvalidParams;
+
+  // Start rescraping additional information for the given artist
+  const std::string cmd = StringUtils::Format("musiclibrary.refreshartist({})",
+                                              StringUtils::Paramify(artistIdVariant.asString()));
+  CServiceBroker::GetAppMessenger()->SendMsg(TMSG_EXECUTE_BUILT_IN, -1, -1, nullptr, cmd);
+
+  return ACK;
+}
+
+JSONRPC_STATUS CAudioLibrary::RefreshAlbum(const std::string& method,
+                                           ITransportLayer* transport,
+                                           IClient* client,
+                                           const CVariant& parameterObject,
+                                           CVariant& result)
+{
+  CMusicDatabase musicdatabase;
+  if (!musicdatabase.Open())
+    return InternalError;
+
+  // Check if albumID is a valid one
+  CAlbum album;
+  const CVariant albumIdVariant{parameterObject["albumid"]};
+  const int albumID = static_cast<int>(albumIdVariant.asInteger());
+  if (!musicdatabase.GetAlbum(albumID, album, false))
+    return InvalidParams;
+
+  // Start rescraping additional information for the given album
+  const std::string cmd = StringUtils::Format("musiclibrary.refreshalbum({})",
+                                              StringUtils::Paramify(albumIdVariant.asString()));
+  CServiceBroker::GetAppMessenger()->SendMsg(TMSG_EXECUTE_BUILT_IN, -1, -1, nullptr, cmd);
+
+  return ACK;
+}
+
 bool CAudioLibrary::CheckForAdditionalProperties(const CVariant &properties, const std::set<std::string> &checkProperties, std::set<std::string> &foundProperties)
 {
   if (!properties.isArray() || properties.empty())
diff --git a/xbmc/interfaces/json-rpc/AudioLibrary.h b/xbmc/interfaces/json-rpc/AudioLibrary.h
index 9946f9d998..674bb0a0d3 100644
--- a/xbmc/interfaces/json-rpc/AudioLibrary.h
+++ b/xbmc/interfaces/json-rpc/AudioLibrary.h
@@ -69,6 +69,16 @@ namespace JSONRPC
     static JSONRPC_STATUS GetAdditionalSongDetails(const CVariant& parameterObject,
                                                    const CFileItemList& items,
                                                    CMusicDatabase& musicdatabase);
+    static JSONRPC_STATUS RefreshArtist(const std::string& method,
+                                        ITransportLayer* transport,
+                                        IClient* client,
+                                        const CVariant& parameterObject,
+                                        CVariant& result);
+    static JSONRPC_STATUS RefreshAlbum(const std::string& method,
+                                       ITransportLayer* transport,
+                                       IClient* client,
+                                       const CVariant& parameterObject,
+                                       CVariant& result);
 
   private:
     static void FillAlbumItem(const CAlbum& album,
diff --git a/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp b/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp
index 0ce49b9898..a5b918f64f 100644
--- a/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp
+++ b/xbmc/interfaces/json-rpc/JSONServiceDescription.cpp
@@ -119,6 +119,8 @@ JsonRpcMethodMap CJSONServiceDescription::m_methodMaps[] = {
   { "AudioLibrary.SetArtistDetails",                CAudioLibrary::SetArtistDetails },
   { "AudioLibrary.SetAlbumDetails",                 CAudioLibrary::SetAlbumDetails },
   { "AudioLibrary.SetSongDetails",                  CAudioLibrary::SetSongDetails },
+  { "AudioLibrary.RefreshArtist",                   CAudioLibrary::RefreshArtist },
+  { "AudioLibrary.RefreshAlbum",                    CAudioLibrary::RefreshAlbum },
   { "AudioLibrary.Scan",                            CAudioLibrary::Scan },
   { "AudioLibrary.Export",                          CAudioLibrary::Export },
   { "AudioLibrary.Clean",                           CAudioLibrary::Clean },
diff --git a/xbmc/interfaces/json-rpc/schema/methods.json b/xbmc/interfaces/json-rpc/schema/methods.json
index 19be352bb1..d01bf63e55 100644
--- a/xbmc/interfaces/json-rpc/schema/methods.json
+++ b/xbmc/interfaces/json-rpc/schema/methods.json
@@ -3063,6 +3063,34 @@
     ],
     "returns": "string"
   },
+  "AudioLibrary.RefreshArtist": {
+    "type": "method",
+    "description": "Refresh the additional information for the given artist",
+    "transport": "Response",
+    "permission": "UpdateData",
+    "params": [
+      {
+        "name": "artistid",
+        "$ref": "Library.Id",
+        "required": true
+      }
+    ],
+    "returns": "string"
+  },
+  "AudioLibrary.RefreshAlbum": {
+    "type": "method",
+    "description": "Refresh the additional information for the given album",
+    "transport": "Response",
+    "permission": "UpdateData",
+    "params": [
+      {
+        "name": "albumid",
+        "$ref": "Library.Id",
+        "required": true
+      }
+    ],
+    "returns": "string"
+  },
   "AudioLibrary.Scan": {
     "type": "method",
     "description": "Scans the audio sources for new library items",
