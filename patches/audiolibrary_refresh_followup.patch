From 38e8909f9f4e22adf7ccce14cf760ebf55040caa Mon Sep 17 00:00:00 2001
From: acidzab <samuele.maoloni@gmail.com>
Date: Tue, 3 Sep 2024 00:56:41 +0200
Subject: [PATCH] [JSON] AudioLibrary: refreshs under builtins, updated json

---
 xbmc/interfaces/builtins/LibraryBuiltins.cpp | 68 ++++++++++++++++++--
 xbmc/interfaces/json-rpc/AudioLibrary.cpp    | 35 ++++------
 xbmc/interfaces/json-rpc/schema/methods.json |  4 +-
 3 files changed, 77 insertions(+), 30 deletions(-)

diff --git a/xbmc/interfaces/builtins/LibraryBuiltins.cpp b/xbmc/interfaces/builtins/LibraryBuiltins.cpp
index b7539eea7f..5decc6f4e3 100644
--- a/xbmc/interfaces/builtins/LibraryBuiltins.cpp
+++ b/xbmc/interfaces/builtins/LibraryBuiltins.cpp
@@ -18,6 +18,7 @@
 #include "guilib/LocalizeStrings.h"
 #include "messaging/helpers/DialogHelper.h"
 #include "messaging/helpers/DialogOKHelper.h"
+#include "music/MusicDbUrl.h"
 #include "music/MusicLibraryQueue.h"
 #include "music/infoscanner/MusicInfoScanner.h"
 #include "settings/LibExportSettings.h"
@@ -344,6 +345,44 @@ static int SearchVideoLibrary(const std::vector<std::string>& params)
   return 0;
 }
 
+/*! \brief Rescrapes additional information for a given artist
+ *  \params params The parameters.
+ *  \details params[0] = "artist id"
+ */
+static int RefreshArtist(const std::vector<std::string>& params)
+{
+  // Checking if the artist id is passed
+  if (params.empty())
+    return -1;
+
+  // Set the artist id on the musicdb url
+  CMusicDbUrl musicUrl;
+  musicUrl.AddOption("artistid", params.front());
+
+  // Start rescraping additional information for the given artist
+  CMusicLibraryQueue::GetInstance().StartArtistScan(musicUrl.ToString(), true);
+  return 0;
+}
+
+/*! \brief Rescrapes additional information for a given album
+ *  \params params The parameters.
+ *  \details params[0] = "album id"
+ */
+static int RefreshAlbum(const std::vector<std::string>& params)
+{
+  // Checking if the album id is passed
+  if (params.empty())
+    return -1;
+
+  // Set the album id on the musicdb url
+  CMusicDbUrl musicUrl;
+  musicUrl.AddOption("albumid", params.front());
+
+  // Start rescraping additional information for the given album
+  CMusicLibraryQueue::GetInstance().StartAlbumScan(musicUrl.ToString(), true);
+  return 0;
+}
+
 // Note: For new Texts with comma add a "\" before!!! Is used for table text.
 //
 /// \page page_List_of_built_in_functions
@@ -401,16 +440,31 @@ static int SearchVideoLibrary(const std::vector<std::string>& params)
 ///     ,
 ///     Brings up a search dialog which will search the library
 ///   }
+///   \table_row2_l{
+///     <b>`musiclibrary.refreshartist([artistId\])`</b>
+///     ,
+///     Rescrapes additional information for a given artist
+///     @param[in] artistId             Artist Id.
+///   }
+///   \table_row2_l{
+///     <b>`musiclibrary.refreshalbum([albumId\])`</b>
+///     ,
+///     Rescrapes additional information for a given album
+///     @param[in] albumId             Album Id.
+///   }
 ///  \table_end
 ///
 
 CBuiltins::CommandMap CLibraryBuiltins::GetOperations() const
 {
-  return {
-          {"cleanlibrary",        {"Clean the video/music library", 1, CleanLibrary}},
-          {"exportlibrary",       {"Export the video/music library", 1, ExportLibrary}},
-          {"exportlibrary2",      {"Export the video/music library", 1, ExportLibrary2}},
-          {"updatelibrary",       {"Update the selected library (music or video)", 1, UpdateLibrary}},
-          {"videolibrary.search", {"Brings up a search dialog which will search the library", 0, SearchVideoLibrary}}
-         };
+  return {{"cleanlibrary", {"Clean the video/music library", 1, CleanLibrary}},
+          {"exportlibrary", {"Export the video/music library", 1, ExportLibrary}},
+          {"exportlibrary2", {"Export the video/music library", 1, ExportLibrary2}},
+          {"updatelibrary", {"Update the selected library (music or video)", 1, UpdateLibrary}},
+          {"videolibrary.search",
+           {"Brings up a search dialog which will search the library", 0, SearchVideoLibrary}},
+          {"musiclibrary.refreshartist",
+           {"Rescrapes additional information for a given artist", 1, RefreshArtist}},
+          {"musiclibrary.refreshalbum",
+           {"Rescrapes additional information for a given album", 1, RefreshAlbum}}};
 }
diff --git a/xbmc/interfaces/json-rpc/AudioLibrary.cpp b/xbmc/interfaces/json-rpc/AudioLibrary.cpp
index 0c2ef79da5..d98d590757 100644
--- a/xbmc/interfaces/json-rpc/AudioLibrary.cpp
+++ b/xbmc/interfaces/json-rpc/AudioLibrary.cpp
@@ -32,8 +32,6 @@
 
 #include <memory>
 
-#include <music/MusicLibraryQueue.h>
-
 using namespace MUSIC_INFO;
 using namespace JSONRPC;
 using namespace XFILE;
@@ -1362,25 +1360,20 @@ JSONRPC_STATUS CAudioLibrary::RefreshArtist(const std::string& method,
                                             const CVariant& parameterObject,
                                             CVariant& result)
 {
-  int artistID = (int)parameterObject["artistid"].asInteger();
-
-  CMusicDbUrl musicUrl;
-  if (!musicUrl.FromString("musicdb://artists/"))
-    return InternalError;
-
   CMusicDatabase musicdatabase;
   if (!musicdatabase.Open())
     return InternalError;
 
-  //checking if artistID is a valid one
+  // Checking if artistID is a valid one
+  const CVariant artistIdVariant{parameterObject["artistid"]};
+  const int artistID = static_cast<int>(artistIdVariant.asInteger());
   if (!musicdatabase.GetArtistExists(artistID))
     return InvalidParams;
 
-  //set the artist id on the musicdb url
-  musicUrl.AddOption("artistid", artistID);
-
-  //executing the StartArtistScan for refreshing the artist scraped information
-  CMusicLibraryQueue::GetInstance().StartArtistScan(musicUrl.ToString(), true);
+  // Start rescraping additional information for the given artist
+  const std::string cmd = StringUtils::Format("musiclibrary.refreshartist({})",
+                                              StringUtils::Paramify(artistIdVariant.asString()));
+  CServiceBroker::GetAppMessenger()->SendMsg(TMSG_EXECUTE_BUILT_IN, -1, -1, nullptr, cmd);
 
   return ACK;
 }
@@ -1391,21 +1384,21 @@ JSONRPC_STATUS CAudioLibrary::RefreshAlbum(const std::string& method,
                                            const CVariant& parameterObject,
                                            CVariant& result)
 {
-  int albumID = (int)parameterObject["albumid"].asInteger();
-
   CMusicDatabase musicdatabase;
   if (!musicdatabase.Open())
     return InternalError;
 
-  //check if albumID is a valid one
+  // Check if albumID is a valid one
   CAlbum album;
+  const CVariant albumIdVariant{parameterObject["albumid"]};
+  const int albumID = static_cast<int>(albumIdVariant.asInteger());
   if (!musicdatabase.GetAlbum(albumID, album, false))
     return InvalidParams;
 
-  std::string path = StringUtils::Format("musicdb://albums/{}/", albumID);
-
-  //execute the album refresh job
-  CMusicLibraryQueue::GetInstance().StartAlbumScan(path, true);
+  // Start rescraping additional information for the given album
+  const std::string cmd = StringUtils::Format("musiclibrary.refreshalbum({})",
+                                              StringUtils::Paramify(albumIdVariant.asString()));
+  CServiceBroker::GetAppMessenger()->SendMsg(TMSG_EXECUTE_BUILT_IN, -1, -1, nullptr, cmd);
 
   return ACK;
 }
diff --git a/xbmc/interfaces/json-rpc/schema/methods.json b/xbmc/interfaces/json-rpc/schema/methods.json
index e0a4d0621c..b7080614ca 100644
--- a/xbmc/interfaces/json-rpc/schema/methods.json
+++ b/xbmc/interfaces/json-rpc/schema/methods.json
@@ -3065,7 +3065,7 @@
   },
   "AudioLibrary.RefreshArtist": {
     "type": "method",
-    "description": "Refresh the given artist in the library",
+    "description": "Refresh the additional information for the given artist",
     "transport": "Response",
     "permission": "UpdateData",
     "params": [
@@ -3079,7 +3079,7 @@
   },
   "AudioLibrary.RefreshAlbum": {
     "type": "method",
-    "description": "Refresh the given album in the library",
+    "description": "Refresh the additional information for the given album",
     "transport": "Response",
     "permission": "UpdateData",
     "params": [
-- 
2.49.0.windows.1

